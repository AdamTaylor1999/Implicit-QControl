function [iF, iG] = expval_2q_vqe(H2q, H1q, x, psi0, mpo_obs, varT, tebd_options)

mpo0 = psi0; %(wrong way around???)
mpotg = mpo_obs;



% mpo0 should be a set of initial invariants, mpotg should be a set of targets
% x should be a set of coefficients [c11(t1), c11(t2), ... c11(tn), c12(t1), ...
% c1nc1(tn), c21(t1), ... c2nc2(tn), T]

% Calculates the infidelity and gradients for 1- and 2-qubit interaction
% control Hamiltonian given mpo0 = {I1, I2, ..., INc} and mpotg = {IT1,
% IT2, ... ITNc}

%need H1q = struct(sys, cell(n, 1), op, cell(n, 1))
%length(H1q) = no. of single qubit control operators (eg; 1 or 2 per site)
%If 2 per site, then the order they act on the qubits is given by the order
%they appear in H1q. 
%eg; if n = 2, H1q.sys = 1 2 1 2, H1q.op = X X Y Y then we act the X
%operators before the Y operators, so single qubit gate layer Y1X1 Y2X2

sv_min = tebd_options.sv_min;
D = tebd_options.bond_dim;
Dc = tebd_options.bond_comp;
nsweep = tebd_options.num_sweep;
midstep = tebd_options.num_midstep;
nt = tebd_options.num_refined_step;
iscpr = tebd_options.is_compressed;
iso = tebd_options.is_second_order;

if iso == 1
    error('Function not yet set up for second order trotter!')
end

if varT == 1
    error('Function not yet set up for time duration optimisation!')
end


d = 2; %automatically set to qubits!


n = length(mpo0); %number of qubits



nc1 = length(H1q); %number of single-qubit control terms
nc2 = n - 1; %number of two-qubit control terms (always set to n-1)

%if length(H2q) > n - 1
%    error('H2q only accepts a single two-body interaction per nearest neighbour qubits!')
%end

c = x(1: end - 1);
T = x(end);
nbin = length(c) / (nc1 + nc2);

c = reshape(c, [nbin, nc1 + nc2]);%multiple H1q leads to error here?
c1 = c(:, 1:nc1);
c2 = c(:, (nc1 + 1):end);


dt = T / (nbin * nt);
Dt = T / nbin;


mpofw = cell(nbin + 1, n);
mpobw = cell(nbin + 1, n);
iG = zeros(nbin, nc1 + nc2);


mpofw(1, :) = mpo0;%careful with difference between { } and ( )
mpobw(1, :) = mpotg;

for k = 1:nbin %gate construction at _control_ bin step
    %defining the forward gates
    %2 qubit forwards gate
    g2 = cell(1, n - 1);
    for j = 1:(n - 1)
        h = c2(k, j) * H2q{j};
        gate = expm(-1i * dt * h);
        gate = reshape(gate, [d,d,d,d]);
        g2{j} = gate;
    end
    
    %1 qubit forwards gate
    g1 = cell(1, n);
    for j = 1:n %chooses qubit
        h = zeros(d); %initially zero 2x2 matrix 
        for jc = 1:nc1
            if H1q(jc).sys == j
                h = h + c1(k, jc) * H1q(jc).op{1}; %is there an issue here? g1 = cx X + cy Y --> NOT cy cx YX, which would be more accurate. By splitting it into cx X + cy Y, we're increasing the Pauli weight!!!!
            end %is this issue not sorted by the fact that cx X + cy Y is then treated as a single operator that is exponentiated               
        end
        gate = expm(-1i * dt * h);
        g1{j} = gate;
    end
    
    
    
    %implementing the forward time evolution
        %forward propagation
        mpofw(k + 1, :) = mpofw(k, :);
        mpofw_temp = squeeze(mpofw(:, :));%create temporary MPO with correct dimensions (no null dimension on inv variable)
        for jt = 1:nt %fine-grained time steps
            %apply odd 2q terms
            for j = 1:2:n - 1
                [mpofw_temp{k + 1, j}, mpofw_temp{k + 1, j + 1}] = ...
                    gate_2q_LR(mpofw_temp{k + 1, j}, mpofw_temp{k + 1, j + 1}, g2{j}, sv_min, D);
            end
            %apply even 2q terms
            for j = 2:2:n - 1
                [mpofw_temp{k + 1, j}, mpofw_temp{k + 1, j + 1}] = ...
                    gate_2q_LR(mpofw_temp{k + 1, j}, mpofw_temp{k + 1, j + 1}, g2{j}, sv_min, D);
            end
            %apply 1q terms
            for j = 1:n
                [mpofw_temp{k + 1, j}] = gate_1q_LR(mpofw_temp{k + 1, j}, g1{j});
            end
        end

        %compression (if applicable) and normalisation
        if mod(k - 1, midstep) == 0 || k == nbin %not sure about this condition
            if iscpr == 1
                mpofw_temp(k + 1, :) = mpo_compress(mpofw_temp(k + 1, :), sv_min, Dc, nsweep);
            end
            mpofw_temp(k + 1, :) = mpo_normalize(mpofw_temp(k + 1, :));
        end
        %update mpofw for each invariant
        mpofw(k + 1, :) = {mpofw_temp{k + 1, :}};    
    %end of forwards propagation

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %defining backwards gates
    %2 qubit backwards gate
    g2 = cell(1, n - 1); %used to save as g2bw, now dropped bw to overwrite g2 for space. hopefully this works
    for j = 1:n - 1      %the analogous thing was done for the 1q gates.
        h = c2(nbin - k + 1, j) * H2q{j};
        gate = expm(1i * dt * h);
        gate = reshape(gate, [d,d,d,d]);
        g2{j} = gate;
    end
    %1 qubit backwards gate
    g1 = cell(1, n);
    for j = 1:n
        h = zeros(d);
        for jc = 1:nc1
            for js = 1:length(H1q(jc).sys)%is this necessary? I don't get this step
                if H1q(jc).sys(js) == j   %I really don't get this step, seems like a weird way of checking.
                    h = h + c1(nbin - k + 1, jc) * H1q(jc).op{js};%depends on how H1q is defined I guess
                end
            end
        end
        gate = expm(1i * dt * h);
        g1{j} = gate;
    end
    %implementing backwards time evolution
    
        %backwards propagation on temporary MPO
        mpobw(k + 1, :) = mpobw(k, :);
        mpobw_temp = squeeze(mpobw(:, :));
        for jt = 1:nt %fine-grained time steps
            %apply 1 qubit terms
            for j = 1:n
                [mpobw_temp{k + 1, j}] = gate_1q_LR(mpobw_temp{k + 1, j}, g1{j});
            end
            %apply even 2 qubit terms
            for j = 2:2:n - 1
                [mpobw_temp{k + 1, j}, mpobw_temp{k + 1, j + 1}] = ...
                    gate_2q_LR(mpobw_temp{k + 1, j}, mpobw_temp{k + 1, j + 1}, g2{j}, sv_min, D);
            end
            %apply odd 2 qubit terms
            for j = 1:2:n - 1
                [mpobw_temp{k + 1, j}, mpobw_temp{k + 1, j + 1}] = ...
                    gate_2q_LR(mpobw_temp{k + 1, j}, mpobw_temp{k + 1, j + 1}, g2{j}, sv_min, D);
            end
        end
        %compression (if applicable) and normalisation
        if mod(k - 1, midstep) == 0 || k == nbin
            if iscpr == 1
                mpobw_temp(k + 1, :) = mpo_compress(mpobw_temp(k + 1, :), sv_min, Dc, nsweep);
            end
            mpobw_temp(k + 1, :) = mpo_normalize(mpobw_temp(k + 1, :));
        end
        %update mpobw for each invariant
        mpobw(k + 1, :) = {mpobw_temp{k + 1, :}};
    end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%finding the gradient
    for k = 1:nbin
        tnsfw_temp = squeeze(mpofw(:, :));
        tnsfw_temp = tnsfw_temp(k + 1, :);
        tnsbw_temp = squeeze(mpobw(:, :));
        tnsbw_temp = tnsbw_temp(nbin - k + 1, :);
       
        
        %1 qubit control perturbations
        for jc1 = 1:nc1
            ovl_diff_left = 0;
            for js = 1:length(H1q(jc1).sys)
                jq = H1q(jc1).sys(js);
                gate = -1i * Dt * H1q(jc1).op{js};
                tnsfw_diff_left = tnsfw_temp;
                tnsfw_diff_left{jq} = gate_1q(tnsfw_diff_left{jq}, gate);
                ovl_diff_left = ovl_diff_left + mpo_overlap(tnsbw_temp, tnsfw_diff_left);
            end
            %adds all inv derivatives together for a given control Hamiltonian
            iG(k, jc1) = 2 * real(ovl_diff_left);
        end
        %2 qubit control perturbations
        for jc2 = 1:nc2
            gate = -1i * Dt * H2q{jc2};
            gate = reshape(gate, [d,d,d,d]);

            tnsfw_diff_left = tnsfw_temp;

            [tnsfw_diff_left{jc2}, tnsfw_diff_left{jc2 + 1}] = ...
                gate_2q(tnsfw_diff_left{jc2}, tnsfw_diff_left{jc2 + 1}, gate, sv_min, D);

            ovl_diff_left = mpo_overlap(tnsbw_temp, tnsfw_diff_left);

            iG(k, nc1 + jc2) = 2 * real(ovl_diff_left);
        end
    end


%not set up for optimising time scale yet
iGT = 0;
iG = [iG(:); iGT];

ovl = real(mpo_overlap(squeeze(mpofw(nbin + 1, :)), mpotg));
iF = 1 - ovl;

end


